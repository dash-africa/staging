{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Dash Documentation",
        "description": "Documentation for Dash endpoints",
        "license": {
            "name": "Dash",
            "url": "https://dash-africa-staging.herokuapp.com/api-docs/#/"
        }
    },
    "host": "localhost:3000",
    "basePath": "/api/v1",
    "tags": [
        {
            "name": "Users",
            "description": "API for dash users"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/api/v1/user/login": {
            "parameters": [
                {
                    "name": "login",
                    "in": "body",
                    "description": "These can be passed, click on Model to see which ones are required",
                    "schema": {
                        "$ref": "#/definitions/UserLogin"
                    }
                }
            ],
            "description": "Logs users in",
            "produces": [
                "application/json"
            ],
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Logs users into the system",
                "responses": {
                    "200": {
                        "description": "User saved and logged in successfully"
                    },
                    "400": {
                        "description": "Wrong Login Details"
                    },
                    "401": {
                        "description": "The user account has not been verified"
                    },
                    "500": {
                        "description": "There was an error setting up your pin"
                    }
                }
            }
        },
        "/api/v1/user/register": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Allows user registration and send them a verification email, please save token in local storage, in case of resending purpose",
                "summary": "Used to create a verifiable user account",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required, _token should be passed as header for authorization",
                        "schema": {
                            "$ref": "#/definitions/UserRegister"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Account has been created and a verification email has been sent"
                    },
                    "409": {
                        "description": "The user already exists"
                    },
                    "500": {
                        "description": "An error occured while creating the user account"
                    }
                }
            }
        },
        "/api/v1/confirmation": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Confirms the otp sent to the user's email",
                "summary": "Used to verify user's account",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required",
                        "schema": {
                            "$ref": "#/definitions/Confirmation"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The user's account have been verified"
                    },
                    "400": {
                        "description": "Token not found"
                    },
                    "500": {
                        "description": "Please, inspect all parameters"
                    }
                }
            }
        },
        "/api/v1/resend": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Resend the verification email to the user",
                "summary": "Used to send another verification message to the user, just incase they didnt receive it in the first place",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "These will be passed",
                        "schema": {
                            "$ref": "#/definitions/Confirmation"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Found"
                    },
                    "401": {
                        "description": "The user was not found"
                    },
                    "400": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/sendForget": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Resends the forgotten email to the user",
                "summary": "Used to send another verification forgotten message to the user, just incase they didnt receive it in the first place",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "These will be passed",
                        "schema": {
                            "$ref": "#/definitions/SendForgot"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Found"
                    },
                    "401": {
                        "description": "The user was not found"
                    },
                    "400": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/forgot_password": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Changes the user's password after forgotten email verification has been received",
                "summary": "Used to change the user's password, just after the forgotten verification message has been received",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "These will be passed",
                        "schema": {
                            "$ref": "#/definitions/ChangePass"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The password have been changed successfully"
                    },
                    "401": {
                        "description": "The user was not found"
                    },
                    "400": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/user/getInfo": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Gets all the details for a particular user",
                "summary": "Used to get all details for a specific user",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "Only the user's token should be passed as header"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The details have been returned successfully"
                    },
                    "404": {
                        "description": "The user was not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/sendOtp": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Sends otp to verify the user's phone number",
                "summary": "Used to send otp to user's phone number",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "Only the user's token should be passed as header",
                        "schema": {
                            "$ref": "#/definitions/SendOTP"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The OTP have been sent successfully"
                    },
                    "401": {
                        "description": "The user with this phone number is not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/verifyPhoneNumber": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Verifies the user's phone number with the otp passed",
                "summary": "Used to verify the user's phone number with the OTP received",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "Only the user's token should be passed as header",
                        "schema": {
                            "$ref": "#/definitions/VerifyPhoneNumber"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User's phone number have been verified"
                    },
                    "401": {
                        "description": "The user with this phone number is not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/user/all": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of users"
                    },
                    "500": {
                        "description": "Unable to get the list of all users"
                    }
                }
            }
        },
        "/api/v1/user/fetchCart": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all user's carts, please send user token via authorization header",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten user's carts"
                    },
                    "500": {
                        "description": "Unable to get user's cart"
                    }
                }
            }
        },
        "/api/v1/user/fetchCards": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all user's cards, please send user token via authorization header",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten user's cards"
                    },
                    "500": {
                        "description": "Unable to get user's cards"
                    }
                }
            }
        },
        "/api/v1/cart/create": {
            "post": {
                "tags": [
                    "Carts"
                ],
                "description": "Creates a new cart",
                "summary": "Used to create a new cart",
                "parameters": [
                    {
                        "name": "cart",
                        "in": "body",
                        "description": "Just pass the user's token as authorization header"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new cart has been created"
                    },
                    "404": {
                        "description": "The user was not found"
                    },
                    "500": {
                        "description": "Unable to create cart, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/cart/getCart/{id}": {
            "get": {
                "summary": "Returns the created cart with the id passed",
                "tags": [
                    "Carts"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned this cart"
                    },
                    "404": {
                        "description": "This cart was not found"
                    },
                    "500": {
                        "description": "An error occured when finding this cart"
                    }
                }
            }
        },
        "/api/v1/cart/addItem": {
            "post": {
                "tags": [
                    "Carts"
                ],
                "description": "Adds new items to the cart",
                "summary": "Used to add items to the cart",
                "parameters": [
                    {
                        "name": "cart",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/CartItems"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new item has been added to the cart"
                    },
                    "404": {
                        "description": "The cart was not found"
                    },
                    "500": {
                        "description": "Unable to find cart, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/category/create": {
            "post": {
                "tags": [
                    "Categories"
                ],
                "description": "Creates a new category",
                "summary": "Used to create a new category",
                "parameters": [
                    {
                        "name": "category",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/Category"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new category has been created"
                    },
                    "404": {
                        "description": "The store was not found"
                    },
                    "500": {
                        "description": "Unable to create category, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/category/addItem": {
            "post": {
                "tags": [
                    "Categories"
                ],
                "description": "Adds a created item in a created category",
                "summary": "Used to add a new item, in a category",
                "parameters": [
                    {
                        "name": "category",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/CategoryItem"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The item has been added to the category"
                    },
                    "404": {
                        "description": "The category/item was not found"
                    },
                    "500": {
                        "description": "Unable to add the item, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/category/all": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of categories"
                    },
                    "500": {
                        "description": "Unable to get the list of all categories"
                    }
                }
            }
        },
        "/api/v1/category/edit": {
            "put": {
                "summary": "Update the category",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "category",
                        "in": "body",
                        "description": "Updates the category with the newly passed parameters",
                        "schema": {
                            "$ref": "#/definitions/CategoryEdit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated this category"
                    },
                    "500": {
                        "description": "There was an error updating this category"
                    }
                }
            }
        },
        "/api/v1/category/delete/{id}": {
            "delete": {
                "summary": "Delete category with given the {id}",
                "tags": [
                    "Categories"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted this category"
                    },
                    "500": {
                        "description": "An error occured when deleting this category"
                    }
                }
            }
        },
        "/api/v1/category/removeItem": {
            "post": {
                "tags": [
                    "Categories"
                ],
                "description": "Removes an item already in the category",
                "summary": "Used to remove an item from a category",
                "parameters": [
                    {
                        "name": "category",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required",
                        "schema": {
                            "$ref": "#/definitions/CategoryItem"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The item have been successfully removed"
                    },
                    "404": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/city/create": {
            "post": {
                "tags": [
                    "Cities"
                ],
                "description": "Creates a new city",
                "summary": "Used to create a new city",
                "parameters": [
                    {
                        "name": "city",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new city has been created"
                    },
                    "500": {
                        "description": "Unable to create city, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/city/addStore": {
            "post": {
                "tags": [
                    "Cities"
                ],
                "description": "Adds an already created store to a city",
                "summary": "Used to add a new store, to a category",
                "parameters": [
                    {
                        "name": "city",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/CityStore"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The store has been added to the city"
                    },
                    "404": {
                        "description": "The city/store was not found"
                    },
                    "500": {
                        "description": "Unable to add the store, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/city/stores/:cityId": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get specific city",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the city"
                    },
                    "404": {
                        "description": "The city with this id was not found"
                    },
                    "500": {
                        "description": "Unable to get the city"
                    }
                }
            }
        },
        "/api/v1/city/topCategories:/cityId": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get the top categories belonging to the city",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the top categories"
                    },
                    "404": {
                        "description": "The city with this id was not found"
                    },
                    "500": {
                        "description": "An error occured"
                    }
                }
            }
        },
        "/api/v1/city/all": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get all cities",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of cities"
                    },
                    "500": {
                        "description": "Unable to get the list of all cities"
                    }
                }
            }
        },
        "/api/v1/city/edit": {
            "put": {
                "summary": "Update the city",
                "tags": [
                    "Cities"
                ],
                "parameters": [
                    {
                        "name": "city",
                        "in": "body",
                        "description": "Updates the city with the newly passed parameters",
                        "schema": {
                            "$ref": "#/definitions/CityEdit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated this city"
                    },
                    "500": {
                        "description": "There was an error updating this city"
                    }
                }
            }
        },
        "/api/v1/city/delete/{id}": {
            "delete": {
                "summary": "Delete city with given the {id}",
                "tags": [
                    "Cities"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the city"
                    },
                    "500": {
                        "description": "An error occured when deleting this city"
                    }
                }
            }
        },
        "/api/v1/city/removeStore": {
            "post": {
                "tags": [
                    "Cities"
                ],
                "description": "Removes a store already in the city",
                "summary": "Used to remove a from a city",
                "parameters": [
                    {
                        "name": "city",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required",
                        "schema": {
                            "$ref": "#/definitions/CityStore"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The store have been successfully removed"
                    },
                    "404": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/item/create": {
            "post": {
                "tags": [
                    "Items"
                ],
                "description": "Creates a new item",
                "summary": "Used to create a new item",
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new city has been created"
                    },
                    "500": {
                        "description": "Unable to create city, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/item/addToCart": {
            "post": {
                "tags": [
                    "Items"
                ],
                "description": "Adds an already created item to a cart",
                "summary": "Used to add an item, to a cart",
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/ItemCart"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The item has been added to the cart"
                    },
                    "404": {
                        "description": "The cart/item was not found"
                    },
                    "500": {
                        "description": "Unable to add the item, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/item/addAddOn": {
            "post": {
                "tags": [
                    "Items"
                ],
                "description": "Adds an already created add-on to an item",
                "summary": "Used to add an add-on, to an item",
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/ItemAddOn"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The add-on has been added to the item"
                    },
                    "404": {
                        "description": "The item was not found"
                    },
                    "500": {
                        "description": "Unable to add the add-on, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/item/removeAddOn": {
            "post": {
                "tags": [
                    "Items"
                ],
                "description": "Removes an already created add-on from an item",
                "summary": "Used to remove an add-on, from an item",
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/ItemAddOn"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The add-on has been removed from the item"
                    },
                    "404": {
                        "description": "The item was not found"
                    },
                    "500": {
                        "description": "Unable to remove the add-on, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/item/all": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Get all items",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of items"
                    },
                    "500": {
                        "description": "Unable to get the list of all items"
                    }
                }
            }
        },
        "/api/v1/item/getItem/{itemId}": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "Get specific items",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the item"
                    },
                    "404": {
                        "description": "The item was not found"
                    },
                    "500": {
                        "description": "Unable to get the item"
                    }
                }
            }
        },
        "/api/v1/item/edit": {
            "put": {
                "summary": "Update the item",
                "tags": [
                    "Items"
                ],
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "Updates the item with the newly passed parameters",
                        "schema": {
                            "$ref": "#/definitions/ItemEdit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated this city"
                    },
                    "500": {
                        "description": "There was an error updating this city"
                    }
                }
            }
        },
        "/api/v1/item/delete/{id}": {
            "delete": {
                "summary": "Delete item with given the {id}",
                "tags": [
                    "Items"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the item"
                    },
                    "500": {
                        "description": "An error occured when deleting this item"
                    }
                }
            }
        },
        "/api/v1/addOn/create": {
            "post": {
                "tags": [
                    "Add-Ons"
                ],
                "description": "Creates a new add-on",
                "summary": "Used to create a new add-on",
                "parameters": [
                    {
                        "name": "add-on",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/AddOn"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new add-on has been created"
                    },
                    "500": {
                        "description": "Unable to create add-on, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/addOn/addItem": {
            "post": {
                "tags": [
                    "Add-Ons"
                ],
                "description": "Adds an already created item to an add-on",
                "summary": "Used to add an item, to an add-on",
                "parameters": [
                    {
                        "name": "add-on",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/ItemAddOn"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The add-on has been added to the item"
                    },
                    "404": {
                        "description": "The item was not found"
                    },
                    "500": {
                        "description": "Unable to add the add-on, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/addOn/all": {
            "get": {
                "tags": [
                    "Add-Ons"
                ],
                "summary": "Get all add-ons",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of add-ons"
                    },
                    "500": {
                        "description": "Unable to get the list of all add-ons"
                    }
                }
            }
        },
        "/api/v1/addOn/getAddOn/{id}": {
            "get": {
                "tags": [
                    "Add-Ons"
                ],
                "summary": "Get specific add-on",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the add-on"
                    },
                    "404": {
                        "description": "The add-on was not found"
                    },
                    "500": {
                        "description": "Unable to get the add-on"
                    }
                }
            }
        },
        "/api/v1/addOn/removeItem": {
            "post": {
                "tags": [
                    "Add-Ons"
                ],
                "description": "Removes an item from the add-on",
                "summary": "Used to remove an item from an add-on",
                "parameters": [
                    {
                        "name": "add-on",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required",
                        "schema": {
                            "$ref": "#/definitions/ItemAddOn"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The item have been successfully removed"
                    },
                    "404": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/addOn/edit": {
            "put": {
                "summary": "Update the add-on",
                "tags": [
                    "Add-Ons"
                ],
                "parameters": [
                    {
                        "name": "item",
                        "in": "body",
                        "description": "Updates the add-on with the newly passed parameters",
                        "schema": {
                            "$ref": "#/definitions/AddOnEdit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated this city"
                    },
                    "500": {
                        "description": "There was an error updating this city"
                    }
                }
            }
        },
        "/api/v1/addOn/delete/:id": {
            "delete": {
                "summary": "Delete add-on with given the {id}",
                "tags": [
                    "Add-Ons"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the add-on"
                    },
                    "500": {
                        "description": "An error occured when deleting this add-on"
                    }
                }
            }
        },
        "/api/v1/store/create": {
            "post": {
                "tags": [
                    "Stores"
                ],
                "description": "Creates a new store",
                "summary": "Used to create a new store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/Store"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new store has been created"
                    },
                    "500": {
                        "description": "Unable to create store, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/store/addCategory": {
            "post": {
                "tags": [
                    "Stores"
                ],
                "description": "Adds an already created category to a store",
                "summary": "Used to add a category, to a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/StoreCategory"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The store has been added to the city"
                    },
                    "404": {
                        "description": "The city/store was not found"
                    },
                    "500": {
                        "description": "Unable to add the store, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/store/all": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get all stores",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of stores"
                    },
                    "500": {
                        "description": "Unable to get the list of all stores"
                    }
                }
            }
        },
        "/api/v1/store/edit": {
            "put": {
                "summary": "Update the store",
                "tags": [
                    "Stores"
                ],
                "parameters": [
                    {
                        "name": "store",
                        "in": "body",
                        "description": "Updates the store with the newly passed parameters",
                        "schema": {
                            "$ref": "#/definitions/StoreEdit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated this store"
                    },
                    "500": {
                        "description": "There was an error updating this store"
                    }
                }
            }
        },
        "/api/v1/store/delete/{id}": {
            "delete": {
                "summary": "Delete store with given the {id}",
                "tags": [
                    "Stores"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the store"
                    },
                    "500": {
                        "description": "An error occured when deleting this store"
                    }
                }
            }
        },
        "/api/v1/store/{id}": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get store contents",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the content in the store"
                    },
                    "500": {
                        "description": "Unable to get the content in the store"
                    }
                }
            }
        },
        "/api/v1/store/items/{id}": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get all the items in all store categories",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the items in the store"
                    },
                    "404": {
                        "description": "The store was not found"
                    },
                    "500": {
                        "description": "Unable to get the items in the store"
                    }
                }
            }
        },
        "/api/v1/store/allCategorized/{city_id}/{storeType_id}": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get all stores, under a city and a store category",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of stores"
                    },
                    "404": {
                        "description": "Store, City, Or StoreType not found"
                    },
                    "500": {
                        "description": "Unable to get the list of all stores"
                    }
                }
            }
        },
        "/api/v1/storeType/create": {
            "post": {
                "tags": [
                    "Store Categories"
                ],
                "description": "Creates a new store type or store category",
                "summary": "Used to create a new store type",
                "parameters": [
                    {
                        "name": "storeType",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/StoreType"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "A new store type has been created"
                    },
                    "500": {
                        "description": "Unable to create store, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/storeType/all": {
            "get": {
                "tags": [
                    "Store Categories"
                ],
                "summary": "Get all store types or store categories",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of store types"
                    },
                    "404": {
                        "description": "No store type was not found"
                    },
                    "500": {
                        "description": "Unable to get the list of all store types"
                    }
                }
            }
        },
        "/api/v1/storeType/edit": {
            "put": {
                "summary": "Update the store type",
                "tags": [
                    "Store Categories"
                ],
                "parameters": [
                    {
                        "name": "storeType",
                        "in": "body",
                        "description": "Updates the store type with the newly passed parameters",
                        "schema": {
                            "$ref": "#/definitions/StoreTypeEdit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated this store"
                    },
                    "500": {
                        "description": "There was an error updating this store"
                    }
                }
            }
        },
        "/api/v1/storeType/delete/{id}": {
            "delete": {
                "summary": "Delete a store type with given the {id}",
                "tags": [
                    "Store Categories"
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the store type"
                    },
                    "500": {
                        "description": "An error occured when deleting this store type"
                    }
                }
            }
        },
        "/api/v1/storeType/addStore": {
            "post": {
                "tags": [
                    "Store Categories"
                ],
                "description": "Adds an already created store to a store type",
                "summary": "Used to add a store, to a store type",
                "parameters": [
                    {
                        "name": "storeType",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/StoreTypeStores"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The store has been added to the store type"
                    },
                    "404": {
                        "description": "The store type was not found"
                    },
                    "500": {
                        "description": "Unable to add the store, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/storeType/getStores/{storeType_id}": {
            "get": {
                "tags": [
                    "Store Categories"
                ],
                "summary": "Get all stores under a store type or store category",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of store"
                    },
                    "404": {
                        "description": "No store was found"
                    },
                    "500": {
                        "description": "Unable to get the list of all stores in the store type"
                    }
                }
            }
        },
        "/api/v1/top_category/create": {
            "post": {
                "tags": [
                    "Top Category"
                ],
                "description": "Creates a top catgory in a store",
                "summary": "Used to create a new top category in an already existing store",
                "parameters": [
                    {
                        "name": "top_category",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/Top"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The category has been found and added to the store successfully"
                    },
                    "404": {
                        "description": "The store with the id provided was not found"
                    },
                    "500": {
                        "description": "Unable to find the store, an unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/history/add": {
            "post": {
                "tags": [
                    "History"
                ],
                "description": "Adds new purchase history, creates a new order of firebase, verifies payment and carries out recurrent charges",
                "summary": "Used to create a new purchase history and empties cart",
                "parameters": [
                    {
                        "name": "history",
                        "in": "body",
                        "description": "These should be passed",
                        "schema": {
                            "$ref": "#/definitions/History"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The new history has been added"
                    },
                    "404": {
                        "description": "The cart was not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/login": {
            "parameters": [
                {
                    "name": "driver_login",
                    "in": "body",
                    "description": "These can be passed, click on Model to see which ones are required",
                    "schema": {
                        "$ref": "#/definitions/UserLogin"
                    }
                }
            ],
            "description": "Logs drivers in",
            "produces": [
                "application/json"
            ],
            "post": {
                "tags": [
                    "Drivers"
                ],
                "summary": "Logs drivers into the system",
                "responses": {
                    "200": {
                        "description": "Driver saved and logged in successfully"
                    },
                    "400": {
                        "description": "Wrong Login Details"
                    },
                    "401": {
                        "description": "The driver account has not been verified"
                    },
                    "500": {
                        "description": "There was an error setting up your pin"
                    }
                }
            }
        },
        "/api/v1/driver/register": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Allows driver registration and send them a verification email, please save token in local storage, in case of resending purpose",
                "summary": "Used to create a verifiable user account",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required, _token should be passed as header for authorization",
                        "schema": {
                            "$ref": "#/definitions/DriverRegister"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Account has been created and a verification email has been sent"
                    },
                    "409": {
                        "description": "The driver already exists"
                    },
                    "500": {
                        "description": "An error occured while creating the driver account"
                    }
                }
            }
        },
        "/api/v1/driver/confirmation": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Confirms the otp sent to the driver's email",
                "summary": "Used to verify driver's account",
                "parameters": [
                    {
                        "name": "driver_confirmation",
                        "in": "body",
                        "description": "These can be passed, click on Model to see which ones are required",
                        "schema": {
                            "$ref": "#/definitions/Confirmation"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The driver's account have been verified"
                    },
                    "400": {
                        "description": "Token not found"
                    },
                    "500": {
                        "description": "Please, inspect all parameters"
                    }
                }
            }
        },
        "/api/v1/driver/resend": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Resend the verification email to the driver",
                "summary": "Used to send another verification message to the driver, just incase they didnt receive it in the first place",
                "parameters": [
                    {
                        "name": "driver_resend",
                        "in": "body",
                        "description": "These will be passed",
                        "schema": {
                            "$ref": "#/definitions/Confirmation"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Found"
                    },
                    "401": {
                        "description": "The driver was not found"
                    },
                    "400": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/sendForget": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Resends the forgotten email to the driver",
                "summary": "Used to send another verification forgotten message to the driver, just incase they didnt receive it in the first place",
                "parameters": [
                    {
                        "name": "driver",
                        "in": "body",
                        "description": "These will be passed",
                        "schema": {
                            "$ref": "#/definitions/SendForgot"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Found"
                    },
                    "401": {
                        "description": "The driver was not found"
                    },
                    "400": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/forgot_password": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Changes the driver's password after forgotten email verification has been received",
                "summary": "Used to change the driver's password, just after the forgotten verification message has been received",
                "parameters": [
                    {
                        "name": "driver",
                        "in": "body",
                        "description": "These will be passed",
                        "schema": {
                            "$ref": "#/definitions/ChangePass"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The password have been changed successfully"
                    },
                    "401": {
                        "description": "The driver was not found"
                    },
                    "400": {
                        "description": "Please, inspect all parameters"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/getInfo": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Gets all the details for a particular driver",
                "summary": "Used to get all details for a specific driver",
                "parameters": [
                    {
                        "name": "driver",
                        "in": "body",
                        "description": "Only the driver's token should be passed as header"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The details have been returned successfully"
                    },
                    "404": {
                        "description": "The driver was not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/sendOtp": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Sends otp to verify the driver's phone number",
                "summary": "Used to send otp to driver's phone number",
                "parameters": [
                    {
                        "name": "driver",
                        "in": "body",
                        "description": "Only the driver's token should be passed as header",
                        "schema": {
                            "$ref": "#/definitions/SendOTP"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The OTP have been sent successfully"
                    },
                    "401": {
                        "description": "The driver with this phone number is not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/verifyPhoneNumber": {
            "post": {
                "tags": [
                    "Drivers"
                ],
                "description": "Verifies the driver's phone number with the otp passed",
                "summary": "Used to verify the driver's phone number with the OTP received",
                "parameters": [
                    {
                        "name": "driver",
                        "in": "body",
                        "description": "Only the driver's token should be passed as header",
                        "schema": {
                            "$ref": "#/definitions/VerifyPhoneNumber"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Driver's phone number have been verified"
                    },
                    "401": {
                        "description": "The driver with this phone number is not found"
                    },
                    "500": {
                        "description": "An unexpected error occured"
                    }
                }
            }
        },
        "/api/v1/driver/all": {
            "get": {
                "tags": [
                    "Drivers"
                ],
                "summary": "Get all drivers",
                "responses": {
                    "200": {
                        "description": "Succesfully gotten the list of drivers"
                    },
                    "500": {
                        "description": "Unable to get the list of all drivers"
                    }
                }
            }
        }
    },
    "definitions": {
        "UserLogin": {
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "uniqueItems": true
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "UserRegister": {
            "required": [
                "firstname",
                "lastname",
                "email",
                "password",
                "phone"
            ],
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "uniqueItems": true
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "Confirmation": {
            "required": [
                "email",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "uniqueItems": true
                },
                "token": {
                    "type": "string",
                    "uniqueItems": true
                }
            }
        },
        "SendForgot": {
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "uniqueItems": true
                }
            }
        },
        "ChangePass": {
            "required": [
                "email",
                "password",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "uniqueItems": true
                },
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "uniqueItems": true
                }
            }
        },
        "SendOTP": {
            "required": [
                "phone",
                "recaptchaToken"
            ],
            "properties": {
                "phone": {
                    "type": "string",
                    "uniqueItems": true
                },
                "recaptchaToken": {
                    "type": "string"
                }
            }
        },
        "VerifyPhoneNumber": {
            "required": [
                "phone",
                "verificationCode"
            ],
            "properties": {
                "phone": {
                    "type": "string",
                    "uniqueItems": true
                },
                "verificationCode": {
                    "type": "string"
                }
            }
        },
        "Cart": {
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "uniqueItems": true
                }
            }
        },
        "CartItems": {
            "required": [
                "cart_id",
                "items"
            ],
            "properties": {
                "cart_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartItemsAddons"
                    }
                }
            }
        },
        "CartItemsAddons": {
            "required": [
                "id",
                "name",
                "price",
                "addOns"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CartAddons"
                    }
                }
            }
        },
        "CartAddons": {
            "required": [
                "id",
                "name",
                "price"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                }
            }
        },
        "Category": {
            "required": [
                "name",
                "store_id"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "CategoryItem": {
            "required": [
                "category_id",
                "item_id"
            ],
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "item_id": {
                    "type": "string"
                }
            }
        },
        "CategoryEdit": {
            "required": [
                "category_id",
                "name"
            ],
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "City": {
            "required": [
                "name",
                "image",
                "coordinates"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "coordinates": {
                    "type": "object",
                    "properties": {
                        "long": {
                            "type": "string"
                        },
                        "lat": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "CityStore": {
            "required": [
                "city_id",
                "store_id"
            ],
            "properties": {
                "city_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "CityEdit": {
            "required": [
                "city_id",
                "name",
                "image",
                "coordinates"
            ],
            "properties": {
                "city_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "coordinates": {
                    "type": "object",
                    "properties": {
                        "long": {
                            "type": "string"
                        },
                        "lat": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "CityId": {
            "required": [
                "city_id"
            ],
            "properties": {
                "city_id": {
                    "type": "string"
                }
            }
        },
        "Item": {
            "required": [
                "name",
                "image",
                "price",
                "description",
                "category_id"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "isAddOn": {
                    "type": "boolean"
                },
                "isSellable": {
                    "type": "boolean"
                },
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddOn"
                    }
                }
            }
        },
        "ItemAddOn": {
            "required": [
                "addOn_id",
                "item_id"
            ],
            "properties": {
                "addOn_id": {
                    "type": "string"
                },
                "item_id": {
                    "type": "string"
                }
            }
        },
        "ItemCart": {
            "required": [
                "cart_id",
                "item_id"
            ],
            "properties": {
                "cart_id": {
                    "type": "string"
                },
                "item_id": {
                    "type": "string"
                }
            }
        },
        "ItemEdit": {
            "required": [
                "item_id",
                "name",
                "image",
                "price"
            ],
            "properties": {
                "item_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                }
            }
        },
        "FetchItem": {
            "required": [
                "item_id"
            ],
            "properties": {
                "item_id": {
                    "type": "string"
                }
            }
        },
        "AddOn": {
            "required": [
                "name",
                "isRequired",
                "isFree",
                "canBuyMultiple",
                "items"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "isRequired": {
                    "type": "boolean"
                },
                "isFree": {
                    "type": "boolean"
                },
                "canBuyMultiple": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AddOnEdit": {
            "required": [
                "addOn_id",
                "name",
                "isRequired",
                "isFree",
                "canBuyMultiple",
                "items"
            ],
            "properties": {
                "addOn_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "isRequired": {
                    "type": "boolean"
                },
                "isFree": {
                    "type": "boolean"
                },
                "canBuyMultiple": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Schedule": {
            "required": [
                "day",
                "time"
            ],
            "properties": {
                "day": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "Store": {
            "required": [
                "name",
                "city_id",
                "storeType_id",
                "delivery_time",
                "tags",
                "image",
                "address",
                "schedule",
                "coordinates"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "city_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "storeType_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "delivery_time": {
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Schedule"
                    }
                },
                "coordinates": {
                    "type": "object",
                    "properties": {
                        "long": {
                            "type": "string"
                        },
                        "lat": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "StoreCategory": {
            "required": [
                "store_id",
                "category_id"
            ],
            "properties": {
                "store_id": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                }
            }
        },
        "StoreEdit": {
            "required": [
                "name",
                "store_id",
                "delivery_time",
                "tags",
                "coordinates"
            ],
            "properties": {
                "store_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "delivery_time": {
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                },
                "coordinates": {
                    "type": "object",
                    "properties": {
                        "long": {
                            "type": "string"
                        },
                        "lat": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "StoreType": {
            "required": [
                "name",
                "image"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "StoreTypeEdit": {
            "required": [
                "name",
                "image",
                "storeType_id"
            ],
            "properties": {
                "storeType_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "StoreTypeStores": {
            "required": [
                "store_id",
                "storeType_id"
            ],
            "properties": {
                "store_id": {
                    "type": "string"
                },
                "storeType_id": {
                    "type": "string"
                }
            }
        },
        "Top": {
            "required": [
                "storeId",
                "name",
                "image"
            ],
            "properties": {
                "storeId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "History": {
            "required": [
                "store_id",
                "cart_id",
                "user_id",
                "paymentRef",
                "status",
                "amount",
                "delivery_fee",
                "service_fee",
                "delivery_address",
                "is_new_payment",
                "last4",
                "card_type"
            ],
            "properties": {
                "store_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "cart_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "user_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "paymentRef": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "delivery_fee": {
                    "type": "number"
                },
                "service_fee": {
                    "type": "number"
                },
                "delivery_address": {
                    "type": "string"
                },
                "is_new_payment": {
                    "type": "boolean"
                },
                "last4": {
                    "type": "string"
                },
                "card_type": {
                    "type": "string"
                }
            }
        },
        "DriverRegister": {
            "required": [
                "firstname",
                "lastname",
                "address",
                "email",
                "password",
                "phone",
                "drivers_license",
                "front_id_card",
                "back_id_card",
                "bank",
                "account_number",
                "photo",
                "mode_of_transportation"
            ],
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "uniqueItems": true
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "drivers_license": {
                    "type": "string"
                },
                "front_id_card": {
                    "type": "string"
                },
                "back_id_card": {
                    "type": "string"
                },
                "bank": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "mode_of_transportation": {
                    "type": "string"
                }
            }
        }
    }
}